class Node(object):
    def __init__(self,data):
        self.data=data
        self.left=None
        self.right=None
        self.height=0
class AVL(object):
    def __init__(self):
        self.root=None
    def isEmpty(self):
        if self.root==None:
            return True
        return False
    def calcHeight(self,node):
        if not node:
            return -1 
        else:
            return node.height
    def calcBalance(self,node):
        if not node:
            return 0
        return self.calcHeight(node.left)-self.calcHeight(node.right)
    def rotateRight(self,node):
        temp=node.left
        t=temp.right
        temp.right=node
        node.left=t
        node.height=max(self.calcHeight(node.left),self.calcHeight(node.right))+1
        temp.height=max(self.calcHeight(temp.left),self.calcHeight(temp.right))+1
        return temp
    def rotateLeft(self,node):
        temp=node.right
        t=temp.left
        temp.lefy=node
        node.right=t
        node.height=max(self.calcHeight(node.left),self.calcHeight(node.right))+1
        temp.height=max(self.calcHeight(temp.left),self.calcHeight(temp.right))+1
        return temp     
    def insert(self,data):
        self.root=self.insertNode(self.root,data)
    def insertNode(self,node,data):
        if not node:
            return Node(data)
        if data<node.data:
            node.left=self.insertNode(node.left,data)
        else:
            node.right=self.insertNode(node.right,data)
        node.height=max(self.calcHeight(node.left),self.calcHeight(node.right))+1
        return self.settleviolation(node,data)
    def settleviolation(self,node,data):
        balance=self.calcBalance(node)
        if balance>1 and data<node.left.data:
            return self.rotateRight(node)
        if balance<-1 and data>node.right.data:
            return self.rotateLeft(node)
        if balance>1 and data>node.left.data:
            node.left=self.rotateLeft(node.left)
            return self.rotateRight(node) 
        if balance<-1 and data<node.right.data:
            node.right=self.rotateRight(node.right)
            return self.rotateLeft(node)
        return node
    def remove(self,data):
        if self.root:
            self.root=self.removeNode(self.root,data)
    def removeNode(self,node,data):
        if not node:
            return node
        if data<node.data:
            node.left=self.removeNode(node.left,data)
        elif data>node.data:
            node.right=self.removeNode(node.right,data)
        else:
            if not node.left and not node.right:
                del node
                return None
            if not node.left:
                t=node.right
                del node
                return t                
            if not node.right:
                t=node.left
                del node
                return t
            temp=self.getpredecessor(node.left)
            node.data=temp.data
            node.left=self.removeNode(node.left,temp.data)
        if not node:
            return node    
        node.height=max(self.calcHeight(node.left),self.calcHeight(node.right))+1
        balance=self.calcBalance(node)
        if balance>1 and self.calcBalance(node.left)>=0:
            return self.rotateRight(node)
        if balance<-1 and self.calcBalance(node.right)<=0:
            return self.rotateLeft(node)
        if balance>1 and self.calcBalance(node.left<0):
            node.left=self.rotateLeft(node.left)
            return rotateRight(node)
            return self.rotateRight(node) 
        if balance<-1 and self.calcBalance(node.right)<=0:
            node.right=self.rotateRight(node.right)
            return self.rotateLeft(node)
        return node
    def getpredecessor(self,node):
        if(node.right):
            return node.right
        return node
    def traverse(self):
        if not self.root:
            print("EMPTY")
        else:
            self.traverseInorder(self.root)
    def traverseInorder(self,node):
        if node.left:
           self.traverseInorder(node.left)
        print(node.data,end=" ")
        if node.right:
            self.traverseInorder(node.right)
