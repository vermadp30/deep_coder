class Node(object):
    def __init__(self,data):
        self.data=data;
        self.leftChild=None;
        self.rightChild=None;
class BinaryTree(object):
    def __init__(self):
        self.root=None;
    
    def insert(self,data):
        if not self.root:
            self.root=Node(data);
        else:
            self.insertNode(data,self.root);
    def insertNode(self,data,node):
        if(data<node.data):
            if node.leftChild:
                self.insertNode(data,node.leftChild);
            else:
                node.leftChild=Node(data);
        else:
            if node.rightChild:
                self.insertNode(data,node.rightChild);
            else:
                node.rightChild=Node(data);
    def traverse(self):
        if self.root:
            self.traverseInorder(self.root);
        else:
            print("No Element");
    def traverseInorder(self,node):
        if node.leftChild:
            self.traverseInorder(node.leftChild);
        print(node.data);
        if node.rightChild:
            self.traverseInorder(node.rightChild);
    def remove(self,data):
        if self.root:
            self.root=self.removeNode(data,self.root);
            
    def removeNode(self,data,node):
        if not node:
            return node;
        if data<node.data:
            node.leftChild=self.removeNode(data,node.leftChild);
        elif data>node.data:
            node.rightChild=self.removeNode(data,node.rightChild);
        else:
            if(node.leftChild is None and node.rightChild is None):
                print("Its leaf Node");
                del node;
                return None;
            elif node.leftChild is None:  
                print("It has right child");
                tempNode=node.rightChild;
                del node;
                return tempNode;
            elif not node.rightChild:
                print("It has left child");
                tempNode=node.leftChild;
                del node;
                return tempNode;
            else:
                print("It has 2 child");
                tempNode=self.getPredecessor(node.leftChild);
                node.data=tempNode.data;
                node.leftChild=self.removeNode(tempNode.data,node.leftChild);
        return node;
    def getPredecessor(self,node):
        if node.rightChild:
            return self.getPredecessor(node.rightChild);
        return node;    
            
        
        
        
bst=BinaryTree();
bst.insert(12);
bst.insert(10);
bst.insert(8);
bst.insert(36);
bst.insert(11);
bst.insert(19);
bst.traverse();
bst.remove(12);
bst.traverse();
