import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;
import java.util.TreeSet;
public class Solution {
static class Pair implements Comparable<Pair> { 
        private int value, index; 
  
        // Constructor 
        public Pair(int v, int p) 
        { 
            value = v; 
            index = p; 
        } 
  
        @Override
        public int compareTo(Pair o) 
        { 
  
            if (index == o.index) { 
                return 0; 
            } 
            else if (value == o.value) { 
                return Integer.compare(index, o.index); 
            } 
            else { 
                return Integer.compare(value, o.value); 
            } 
        } 

        public int value() 
        { 
            return value; 
        } 
   
        public void renew(int v, int p) 
        { 
            value = v; 
            index = p; 
        } 
  
        @Override
        public String toString() 
        { 
            return String.format("(%d, %d)", value, index); 
        } 
    } 
  
    // Function to print the median for the current window 
    static double printMedian(TreeSet<Pair> minSet, 
                            TreeSet<Pair> maxSet, int window) 
    { 
  
        // If the window size is even then the 
        // median will be the average of the 
        // two middle elements 
        if (window % 2 == 0) { 
            return((minSet.last().value()+ maxSet.first().value())/2.0); 
             
        } 
  
        // Else it will be the middle element 
        else { 
            return(minSet.size() > maxSet.size()? minSet.last().value():maxSet.first().value());  
        } 
    } 
  
    // Function to find the median 
    // of every window of size k 
    static double[] findMedian(int arr[], int k) 
    { 
        TreeSet<Pair> minSet = new TreeSet<>(); 
        TreeSet<Pair> maxSet = new TreeSet<>(); 
        int l=arr.length;
        double[] median = new double[l-k+1]; 
         int a=0;
        Pair[] windowPairs = new Pair[k]; 
  
        for (int i = 0; i < k; i++) { 
            windowPairs[i] = new Pair(arr[i], i); 
        } 
   
        for (int i = 0; i < k / 2; i++) { 
            maxSet.add(windowPairs[i]); 
        } 
  
        for (int i = k / 2; i < k; i++) { 
  
            // Below logic is to maintain the 
            // maxSet and the minSet criteria 
            if (arr[i] < maxSet.first().value()) { 
                minSet.add(windowPairs[i]); 
            } 
            else { 
                minSet.add(maxSet.pollFirst()); 
                maxSet.add(windowPairs[i]); 
            } 
        } 
  
        median[a]=printMedian(minSet, maxSet, k); 
        a++;
        for (int i = k; i < arr.length; i++) { 
  
            // Get the pair at the start of the window, this 
            // will reset to 0 at every k, 2k, 3k, ... 
            Pair temp = windowPairs[i % k]; 
            if (temp.value() <= minSet.last().value()) { 
  
                // Remove the starting pair of the window 
                minSet.remove(temp); 
  
                // Renew window start to new window end 
                temp.renew(arr[i], i); 
  
                // Below logic is to maintain the 
                // maxSet and the minSet criteria 
                if (temp.value() < maxSet.first().value()) { 
                    minSet.add(temp); 
                } 
                else { 
                    minSet.add(maxSet.pollFirst()); 
                    maxSet.add(temp); 
                } 
            } 
            else { 
                maxSet.remove(temp); 
                temp.renew(arr[i], i); 
  
                // Below logic is to maintain the 
                // maxSet and the minSet criteria 
                if (temp.value() > minSet.last().value()) { 
                    maxSet.add(temp); 
                } 
                else { 
                    maxSet.add(minSet.pollLast()); 
                    minSet.add(temp); 
                } 
            } 
  
            median[a]=printMedian(minSet, maxSet, k);
            a++; 

        } 
        return median;
    }     
    // Complete the activityNotifications function below.
    static int activityNotifications(int[] expenditure, int d) {
           int l=expenditure.length;
           double[] median;
           int count=0;
           median=findMedian(expenditure,d);
           //for(int i=0;i<median.length;i++)
             //System.out.print(median[i]+" ");
           //System.out.println();  
           for(int i=d;i<l;i++)
           {
               if(expenditure[i]>=(2*median[i-d]))
               count++;
           }
    return count;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] nd = scanner.nextLine().split(" ");

        int n = Integer.parseInt(nd[0]);

        int d = Integer.parseInt(nd[1]);

        int[] expenditure = new int[n];

        String[] expenditureItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int expenditureItem = Integer.parseInt(expenditureItems[i]);
            expenditure[i] = expenditureItem;
        }

        int result = activityNotifications(expenditure, d);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}
